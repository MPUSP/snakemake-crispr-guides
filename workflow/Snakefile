# ----------------------------------------------------- #
# A Snakemake workflow for the design of small guide    #
# RNAs (sgRNAs) for CRISPR applications.                #
#                                                       #
# Author: Michael Jahn                                  #
# Date: 2023-04-04                                      #
# License: GPL v3 (for all 3rd party tools              #
# separate licenses may apply)                          #
# ----------------------------------------------------- #


# load rules
# -----------------------------------------------------
include: "rules/common.smk"


# load configuration
# -----------------------------------------------------
configfile: "config/config.yml"


# container definition (optional)
container: "oras://ghcr.io/MPUSP/snakemake-crispr-guides:1.3.0"


# target rule
# -----------------------------------------------------
rule all:
    input:
        "results/versions/log_env.txt",
        "results/module_logs/log.txt",


# module to fetch genome from NCBI or Ensemble
# -----------------------------------------------------
rule get_genome:
    params:
        database=config["get_genome"]["database"],
        assembly=config["get_genome"]["assembly"],
        fasta=config["get_genome"]["fasta"],
        gff=config["get_genome"]["gff"],
    output:
        path=directory("results/get_genome"),
        fasta="results/get_genome/genome.fasta",
        gff="results/get_genome/genome.gff",
    conda:
        "envs/get_genome.yml"
    log:
        path="results/get_genome/log.txt",
    script:
        "scripts/get_genome.py"


# module to build bowtie index
# -----------------------------------------------------
rule bowtie_index:
    input:
        rules.get_genome.output.fasta,
    output:
        path=directory("results/bowtie_index"),
    conda:
        "envs/bowtie_index.yml"
    log:
        path="results/bowtie_index/log.txt",
    shell:
        "bowtie-build {input} {output.path}/index > {log.path} 2>&1"


# module to create BSgenome
# -----------------------------------------------------
rule bsgenome:
    input:
        fasta=rules.get_genome.output.fasta,
        gff=rules.get_genome.output.gff,
    output:
        path=directory("results/bsgenome"),
        bsgenome="results/bsgenome/bsgenome.RData",
        seqinfo="results/bsgenome/seqinfo.RData",
    conda:
        "envs/bsgenome.yml"
    log:
        path="results/bsgenome/log.txt",
    script:
        "scripts/create_bsgenome.R"


# module to design guide RNAs using R crisprDesign
# -----------------------------------------------------
rule design_guides:
    params:
        config["design_guides"],
        max_cores=workflow.cores,
    input:
        fasta=rules.get_genome.output.fasta,
        gff=rules.get_genome.output.gff,
        bowtie_index=rules.bowtie_index.output.path,
        bsgenome=rules.bsgenome.output.bsgenome,
        seqinfo=rules.bsgenome.output.seqinfo,
    output:
        expand(
            "results/design_guides/guideRNAs_{guideset}.RData",
            guideset=config["design_guides"]["target_type"],
        ),
        list_tx="results/design_guides/list_tx.csv",
    conda:
        "envs/design_guides.yml"
    log:
        path="results/design_guides/log.txt",
    script:
        "scripts/design_guides.R"


# module to design guide RNAs using R crisprDesign
# -----------------------------------------------------
rule filter_guides:
    params:
        config["filter_guides"],
        max_cores=workflow.cores,
    input:
        guideset="results/design_guides/guideRNAs_{guideset}.RData",
        list_tx=rules.design_guides.output.list_tx,
    output:
        guideset_csv="results/filter_guides/guideRNAs_{guideset}.csv",
    conda:
        "envs/design_guides.yml"
    log:
        path="results/filter_guides/guideRNAs_{guideset}.log",
    script:
        "scripts/filter_guides.R"


# module to visualize guide RNA prediction using R
# -----------------------------------------------------
rule report_html:
    input:
        expand(
            "results/filter_guides/guideRNAs_{guideset}.csv",
            guideset=config["design_guides"]["target_type"],
        ),
        list_tx=rules.design_guides.output.list_tx,
    params:
        config["report"],
    output:
        html="results/report/report.html",
    conda:
        "envs/report.yml"
    log:
        path="results/report/html_log.txt",
    script:
        "notebooks/report.Rmd"


# module to convert HTML to PDF output
# -----------------------------------------------------
rule report_pdf:
    input:
        html=rules.report_html.output.html,
    output:
        pdf="results/report/report.pdf",
    conda:
        "envs/report.yml"
    log:
        path="results/report/pdf_log.txt",
    shell:
        "weasyprint -v {input.html} {output.pdf} &> {log.path}"


# module to combine all module log files to single log
# -----------------------------------------------------
rule module_logs:
    input:
        rules.get_genome.log.path,
        rules.bowtie_index.log.path,
        rules.design_guides.log.path,
        rules.report_html.log.path,
        rules.report_pdf.log.path,
    conda:
        "envs/basic.yml"
    log:
        path="results/module_logs/log.txt",
    shell:
        "cat {input} >> {log.path}"


# module to fetch software versions from conda envs
# -----------------------------------------------------
rule versions:
    input:
        expand(
            wfpath("envs/{module}"),
            module=listdir(wfpath("envs")),
        ),
    output:
        path="results/versions/log_packages.txt",
    conda:
        "envs/basic.yml"
    log:
        path="results/versions/log_env.txt",
    shell:
        "conda env export > {log.path};"
        "cat {input} >> {output.path}"
